# -----------------------------------------------------------------------------
#
#	Comandos linux mas concurridos
#
# -----------------------------------------------------------------------------

# Notas
NEVER WORK AS ROOT
	
#Get Conection number per second	
	 watch -n 1  'netstat -anp | grep :80 | grep ESTABLISHED | wc -l'

	
=======

#NetWork 
 netstat -tulpn	

# find ~ -size +100M
# find ~ -size -100M
# find ~ -size 100M

# alias rmao="find . -iname a.out -exec rm {} \;"
# rmao

The following command removes *.zip files that are over 100M.
# find / -type f -name *.zip -size +100M -exec rm -i {} \;"


>>>>>>> 75050fffb2d829eb6fc06b4dc27b0166fd9d0134
#BackUP
	TIME=$(date +"%d-%m-%Y-%T")
	rsync -arzv  -e  'ssh -p 22' root@10.128.8.185:/cloud/sites_proyectos/*  /home/biblioteca_respaldos/ >> /home/biblioteca_respaldos/log
	rsync -arzv  -e  'ssh -p 22' root@10.128.8.185:/cloud/sites_proyectos/* /home/biblioteca_respaldos/ 
	TIME2=$(date +"%d-%m-%Y-%T")	
	echo "BackUp ($TIME) a ($TIME2) " | mutt -s "El Backup se realizo con exito" xxxxxxxxxxxxx@gmail.com 
	mysqldump -h localhost -u root -p --all-databases > /home/respaldos-sql/$TIME.sql 		# Exporta toda la base de datos
	mysql -uroot -p < /home/respaldos-sql/nombre.sql										# Importa toda la base de datos al Servicio de MySql
	dd bs=1M if=/dev/sda | gzip | ssh user@remote 'dd of=sda.gz'							# Backup harddisk to remote machine # GEnerar Backup en remotemachine

# Transferencia de Archivos
	scp -l 81920 -P123 -pr  root@192.192.192.192:/var/www/images/*	/var/www/images/ 			 
	rsync --bwlimit=1000  -vr --exclude='*.jpg' /home/scripts/      /home/rspscript/			
 	rsync -az 	-e ssh --delete ~/public_html/     remote.com:'~/public_html'					
	rsync -arzv -e 'ssh -p 9292' root@10.128.8.185:/cloud/sites_proyectos/* /home/biblioteca_respaldos/
		
# Archivos  	
	sed 's/string1/string2/g'													# Replace string1 with string2
 	sed 's/\(.*\)1/\12/g'														# Modify anystring1 to anystring2
 	sed '/^ *#/d; /^ *$/d'														# Remove comments and blank lines
 	sed ':a; /\\$/N; s/\\\n//; ta'												# Concatenate lines with trailing \
 	sed 's/[ \t]*$//'															# Remove trailing spaces from lines
 	sed 's/\([`"$\]\)/\\\1/g'													# Escape shell metacharacters active within double quotes
	seq 10 | sed "s/^/      /; s/ *\(.\{7,\}\)/\1/"								# Right align numbers
	seq 10 | sed p | paste - -													# Duplicate a column
 	sed -n '1000{p;q}'															# Print 1000th line
 	sed -n '10,20p;20q'															# Print lines 10 to 20
 	sed -n 's/.*<title>\(.*\)<\/title>.*/\1/ip;T;q'								# Extract title from HTML web page
 	sed -i 42d ~/.ssh/known_hosts												# Delete a particular line
 	sort -t. -k1,1n -k2,2n -k3,3n -k4,4n										# Sort IPV4 ip addresses
	echo 'Test' | tr '[:lower:]' '[:upper:]'									# Case conversion
	tr -dc '[:print:]' < /dev/urandom											# Filter non printable characters
	tr -s '[:blank:]' '\t' </proc/diskstats | cut -f4							# cut fields separated by blanks
	history | wc -l																# Count lines
	seq 10 | paste -s -d ' '													# Concatenate and separate line items to a single line
 	sort file1 file2 | uniq														# Union of unsorted files
 	sort file1 file2 | uniq -d													# Intersection of unsorted files
 	sort file1 file1 file2 | uniq -u											# Difference of unsorted files
 	sort file1 file2 | uniq -u													# Symmetric Difference of unsorted files
 	join -t'\0' -a1 -a2 file1 file2												# Union of sorted files
 	join -t'\0' file1 file2														# Intersection of sorted files
 	join -t'\0' -v2 file1 file2													# Difference of sorted files
 	join -t'\0' -v1 -v2 file1 file2												# Symmetric Difference of sorted files	
	ls -lSr																		# Show files by size, biggest last
	du -s * | sort -k1,1rn | head												# Show top disk users in current dir. See also dutop
	du -hs /home/* | sort -k1,1h												# Sort paths by easy to interpret disk usage
	df -h																		# Show free space on mounted filesystems
	df -i																		# Show free inodes on mounted filesystems
	fdisk -l																	# Show disks partitions sizes and types (run as root)
	rpm -q -a --qf '%10{SIZE}\t%{NAME}\n' | sort -k1,1n							# List all packages by installed size (Bytes) on rpm distros
	dpkg-query -W -f='${Installed-Size;10}\t${Package}\n' | sort -k1,1n			# List all packages by installed size (KBytes) on deb distros
	dd bs=1 seek=2TB if=/dev/null of=ext3.test									# Create a large test file (taking no space). See also truncate
	tail -f /var/log/messages													# Monitor messages in a log file
	strace -c ls >/dev/null														# Summarise/profile system calls made by command
	strace -f -e open ls >/dev/null												# List system calls made by command
	strace -f -e trace=write -e write=1,2 ls >/dev/null							# Monitor what's written to stdout and stderr
	ltrace -f -e getenv ls >/dev/null											# List library calls made by command		
	lsof -p $$																	# List paths that process id has open
	lsof ~																		# List processes that have specified path open
	ps -e -o pid,args --forest													# List processes in a hierarchy
	ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed '/^ 0.0 /d'		# List processes by % cpu usage
	ps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS						# List processes by mem (KB) usage. See also ps_mem.py
	ps -C firefox-bin -L -o pid,tid,pcpu,state									# List all threads for a particular process
	ps -p 1,$$ -o etime=														# List elapsed wall time for particular process IDs
	last reboot																	# Show system reboot history
	free -m																		# Show amount of (remaining) RAM (-m displays in MB)
	watch -n.1 'cat /proc/interrupts'											# Watch changeable data continuously
	udevadm monitor																# Monitor udev events to help configure rules
 	uname -a																	# Show kernel version and system architecture
	head -n1 /etc/issue															# Show name and version of distribution
	cat /proc/partitions														# Show all partitions registered on the system
	grep MemTotal /proc/meminfo													# Show RAM total seen by the system
	grep "model name" /proc/cpuinfo												# Show CPU(s) info
	lspci -tv																	# Show PCI info
	lsusb -tv																	# Show USB info
	mount | column -t															# List mounted filesystems on the system (and align output)
	grep -F capacity: /proc/acpi/battery/BAT0/info								# Show state of cells in laptop battery
	dmidecode -q | less	Display SMBIOS/DMI 										# information
	smartctl -A /dev/sda | grep Power_On_Hours									# How long has this disk (system) been powered on in total
	hdparm -i /dev/sda															# Show info about disk sda
	hdparm -tT /dev/sda															# Do a read speed test on disk sda
	badblocks -s /dev/sda														# Test for unreadable blocks on disk sda
 	
# Wget	
	cd dir/ && wget -nd -pHEKk http://www.pixelbeat.org/cmdline.html 			# Store local browsable version of a page to the current dir
 	wget -c http://www.example.com/large.file									# Continue downloading a partially downloaded file
 	wget -r -nd -np -l1 -A '*.jpg' http://www.example.com/dir/					# Download a set of files to the current directory
 	wget ftp://remote/file[1-9].iso/											# FTP supports globbing directly
	wget -q -O- http://www.pixelbeat.org/timeline.html | grep 'a href' | head	# Process output directly
 	echo 'wget url' | at 01:00													# Download url at 1AM to current dir
 	wget --limit-rate=20k url													# Do a low priority download (limit to 20KB/s in this case)
 	wget -nv --spider --force-html -i bookmarks.html							# Check links in a file
 	wget --mirror http://www.example.com/										# Efficiently update a local copy of a site (handy from cron)
	wget -b wget -c http://example.com/folder/file   # start download in background:
	wget --ftp-user=USER --ftp-password=PASS ftp://example.com/folder/file # download a file from ftp server:

 	
# Envio Correo
	echo "Respaldo de $TIME realizado" | mutt -s "El Backup se realizo con existo" maxbrauer@gmail.com 	

# Inicia compresion	
	tar  -cvf /home/backups/respzip/$TIME.tar	/home/backups/www/ /home/backups/mysql-data/
	tar  -cvzf new_tarname.tar.gz 				#folder-you-want-to-compress
	tar  -xvzf scheduler.tar.gz  				#Inicia Descompresion

#Cambiar usuario contrasena cada N DIAS
	chage -M 30 user     passwd -x 30 user

#Bloquear cuentas de usuario
	passwd -l user o usermod -L user
	
#Suprimir cuenta sin suprimir documentos
	userdel max    //Sin la -r de recursivo
	
#Utilizar para comprobar estados de ficheros de usuarios y contrasenas
	pwck
	
#De unix que no gestionaba los Shadows, para migrar las contrasenas
	pwconv        //Convertira /etc/passwd  y vertera su contenido en 2 ficheros.
	
#Saber cuando se conecto usuario por ultima vez
	lastlog -u user  o  last max
	
#Ruta de los Crontab 
	cat /etc/crontab

#Editar crontab de usuario
	crontab -u usuario
	
#Ejecutar tareas a cierto tiempo por unica vez
	at -f apaga.sh 21:00
	
#Para listar tareas y eliminar
	atq    /    atrm idjob
	
#Prohibir al ususario utilizar crontab
	Añadiendo su login a /etc/cron.deny
	
#Como archivar y comprimir bzip2 el directorio de datos
	tar cvjf datos.tar.bz2 /archivo o dir/
	
#Metodos para conocer la hora actual
	date
	
#Para conocer fechas
	date --date "12/02/1975"
	
#Para establecer las fechas y horas
	hwclock --set  "mes/dia/año"   /    date -s "mes/dia/año" 

#Para modificar cliente NTP
	/etc/ntpd.conf
	
#Modificacion GRUB ARRANQUE
	/boot/grub/menu.lst

#Comando para instalar Grub sobre el MBR del segundo disco IDE
	grub-install /dev/hdb

#Apagar el ordenador en 25 Minutos
	shutdown -r +25
	
#Comando para detectar problemas de inicio y deteccion de hardware
	dmesg
	
#Version exacta del nucleo 
	uname -r 
	
#Version Con todo
	uname -a
	
#Ver que modulos estan cargados en SO
	lsmod | grep vfat
	
#Remover Modulos del SO 
	rmmod fat
	
#Cargar modulos Al SO en boottime
	pico /etc/modules
	
#Si autoriza Ip Forwarding
	sysctl -a | grep ip_forward   1-Si esta autorizado
	
#Listar todos los perifericos PCI
	lspci
	
#Generar alias
	alias l='ls -l --color=auto'
# View the manual for target command
	man command

# Get help with a target command (probably the same as above, but not always):
	command -h

# In case you forget the name of a command, print possible commands relating to any given word:
	apropos word

# View index of help pages:
info

**** Basic File and Directory Operations:
# Print current working directory:
	pwd

# Show files in current directory:
	ls

# Show maximum information about all files, including hidden:
	ls -a

# Recurse into subdirectories and list those as well:
	ls -R

# List files by modification time, most recent first.
	ls -lt

# Move/rename a file or directory (be careful that you don't move the source over a destination with the same name):
	mv source destination

# Delete target forever (be very careful), use -r recursive flag for directories:
	rm target

# Copy file or directory:
	cp source destination

# Mount filesytem:
	mount /dev/device_name /media/device_name

# Unmount:
	umount /media/device_name

# Forensically clone filesystems and do other low-level operations on files. Be careful with this one. Can be destructive:
	dd

# Filesystem creation tool:
	mkfs

**** System Administration:

# Execute command as an administrator (can be destructive/insecure. Use only for system administration tasks):
	sudo command

# Become system administrator:
	sudo -s

# Quit system administration:
	exit

# Forgot to type sudo in front of a command and already hit enter? Repeat the last command using sudo:
	sudo !!

***** Installing software from a .tgz (also known as a tarball):
# First, unzip the tarball (see section on tar, below)
# Next, move into unzipped directory:
	cd software_directory

# Always read README first if it is provided, in case there are any modifications to the procedure outlined below:
	cat README

# Automatically check for appropriate configurations and generate a MAKE file in the directory:
	./configure

# Compile software. May require sudo:
	make

# Move files into their appropriate locations. May also require sudo:
	make install

# Clean up files in directory, in case make command fails, or just to remove unnecessary cruft:
	make clean

***** Ubuntu/Debian Software repositories:
# Check distro repositories for software updates:
	sudo apt-get update

# Download and install updates (update first):
	sudo apt-get upgrade

# Search for package in the repositories:
	apt-cache search keyword

# Get more detail on one specific package:
	apt-cache show package_name

# Download and install a package:
	sudo apt-get install package_name

# View the output of a command in a more convenient format:
	command | less

**** Working With Files:
# Print a file in terminal:
	cat file

# Find files matching filename:
	locate filename

# See the version of a program or the location of the program
	which appname

# Search through filename for matches to phrase:
	grep phrase filename

# Search through output of a command for phrase:
	command | grep phrase

**** Working With Processes:
# List all running processes:
	ps -e

# Standard system monitor showing a more extensive view of all processes and system resources:
	top

# Like top, but with a better, cleaner interface:
	htop

# Stop a process from using all system resources and lagging computer:
	renice process_name

# Kill misbehaving process (use sparingly, last resort, try 'renice' command first):
	pkill process name

# Start a process in the background
	command &

# Start a process in the background and have it keep running after you log off
	nohup command &

**** Compression and Encryption:
# Make a simple compressed backup of files or directories:
	tar -cvzf backup_output.tgz target_files_or_directories

# Open a compressed .tgz or .tar.gz file:
	tar -xvf target.tgz

# Encrypt a file:
	gpg -o outputfilename.gpg -c target_file

# Decrypt a file:
	gpg -o outputfilename -d target.gpg

# Zip and encrypt a directory simultaneously:
	gpg-zip -o encrypted_filename.tgz.gpg -c -s file_to_be_encrypted

*** The Bash shell:
**** File Name expansions:
# Current user's home directory:
	~/

# Current directory:
	./

# Parent directory:
	../

# Or even (Two parent directories down):
	../../

# All files in target directory. (Be very careful.):
	/*

**** Output Redirects:
# Redirect output of one command into the input of another with a pipe:
	command_1 | command_2

# Or even:
	command_1 | command_2 | command_3

# Redirect output to a file:
	command > file

# Or:
	file > file

# Or even, to redirect in a different direction:
	file < file

# Append output rather than writing over the target file:
	file_or_command >> file

# Works like |, but it writes output to both target and terminal:
	tee target

# Redirect standard output and error to /dev/null, where it is deleted.
	command > /dev/null 2>&1

**** Controlling Execution:
# Wait until command 1 is finished to execute command 2
	command_1 ; command_2

# Or even:
	command_1 ; command_2 ; command_3

# && acts like ; but only executes command_2 if command_1 indicates that it succeeded without error by returning 0.
	command_1 && command_2

# || acts like && but only executes command_2 if command_1 indicates an error by returning 1.
	command_1 || command_2

**** Bash Wildcards:
# Zero or more characters:
	*

# Matches "phrase" and any number of trailing characters:
	phrase*
	
# Matches any incidences of "phrase" with any trailing or leading chars:
	*phrase*

# Matches any one char:
	?

# Matches any of the characters listed inside brackets:
	[chars]

# Matches a range of chars between a-z:
	[a-z]

** Advanced:
*** Command Line Utilities, Continued:
**** Networking:

# Configure network interfaces:
	ifconfig

# Configure wireless network interfaces:
	iwconfig

# Connect to a remote server.
	ssh username@ip_address

# Forward X from target to current machine (Get a remote desktop. Somewhat obscure, but very useful):
	ssh -X username@ip_address

# Copy files/directory over the network from one machine to another recursively:
	scp -r source_filename:username@ip_address target_filename:target_username@target_ip_address

# Check to see if target is online and responding
	ping ip_address

# View network route to target:
	traceroute6 ip_address

# Network Monitor
	netstat

# View firewall rules
	iptables -L

# Scan this machine(localhost) to check for open ports:
	nmap localhost

***** netcat:

# Listen for input from network on recieving_port, dump it to a file (insecure, but handy):
	netcat -l recieving_port > file_copied

# Pipe the output of a command to a target ip and port over the network:
	command | netcat -w number_of_seconds_before_timeout target_ip target_port

# Use tar to compress and output a file as a stream, pipe it to a target ip and port over the network:
	sudo tar -czf - filename | netcat -w number_of_seconds_before_timeout target_ip target_port

**** Users and Groups:
# Change owner of a file or directory:
	chown user_name:group_name directory_name

# Change privileges over file or directory (see man page for details.)
	chmod

# Create a new user:
	adduser

# Change user privileges (be very careful with this one):
	usermod

# Delete user
	deluser

# Print groups:
	groups

# Create a new group:
	groupadd

# Change group privileges:
	groupmod

# Delete group:
	delgroup

# Temporarily become a different user:
	su username

# Print usernames of logged in users:
	users

# Write one line to another user from your terminal:
	talk

# Interactive talk program to talk to other users from terminal (must be installed from repositories.):
	ytalk

**** Working With Files, Continued:
# View what processes are using what files:
	lsof

# View the differences between two files:
	diff file_1 file_2

# Output the top number_of_lines of file:
	head -n number_of_lines file

# Like head, but it outputs the last -n lines:
	tail -n number_of_lines file

# Checksum a file:
	md5sum file

# Checksum every file in a directory (install this one from repositories.):
	md5deep directory

# Checksum a file (better algorithm with no hash collisions):
	sha1sum

# Same operation as md5deep, but using sha1:
	sha1deep

# Call command every few number_of_seconds, and highlight difference in output:
	watch -d -n number_of_seconds command

# Execute command, print how long it took:
	time command

# View files in directory from largest to smallest:
	du -a directory | sort -n -r | less

# remove spaces from filenames in current directory:
	rename -n 's/[\s]/''/g' *

# change capitals to lowercase in filenames in current directory:
	rename 'y/A-Z/a-z/' *

***** Environment and Hardware:
# print motherboard information
	dmidecode

# Print full date and time:
	date

# Print the hostname of this machine:
	echo $HOSTNAME

# Print information about current linux distro:
	lsb_release -a

# Or even:
	more /etc/issue

# Print linux kernel version:
	uname -a

# Print information about kernel modules:
	lsmod

# Configure kernel modules (never do this ;p ):
	modprobe

# View Installed packages:
	dpkg --get-selections

# Print environment variables:
	printenv 

# List hardware connected via PCI ports:
	lspci

# List hardware connected via USB ports:
	lsusb

# Print hardware info stored in BIOS:
	sudo dmidecode

# Dump captured data off of wireless card:
	dumpcap

# Dump info about keyboard drivers:
	dumpkeys

***** Ubuntu System Administration, Advanced (Continued):
# Add a Personal Package Archive from Ubuntu Launchpad:
	add-apt-repository

# Install a .deb file from command line:
	sudo dpkg -i package.deb

**** Python:
# Update pip (Python package manager):
	pip install -U pip

# search pip repos for a library:
	pip search library_name

# create a virtual python environment to allow install of many different versions of the same Python modules:
	virtualenv dirname --no-site-packages

# connect to a virtual python environment
	source dirname/bin/activate

# disconnect from a virtual python environment:
	deactivate

# install package into virtual python environment from outside:
	pip install packagename==version_number -E dirname

# export python virtual environment into a shareable format:
	pip freeze -E dirname > requirements.txt

# import python virtual environment from a requirements.txt file:
	pip install -E dirname -r requirements.txt

**** git (all commands must be performed in the same directory as .git folder):
# Start a new git project:
	git init

	git config user.name "user_name"

	git config user.email "email"

# Make a copy of a git (target can be specified either locally or remotely, via any number of protocols):
	git clone target

# Commit changes to a git:
	git commit -m "message"

# Get info on current repository:
	git status

# Show change log for current repository:
	git log

# Update git directory from another repository:
	git pull [target]

# Push branch to other repository:
	git push [target]

# Create a new branch:
	git branch [branchname]

# Switch to target branch:
	git checkout [branchname]

# Delete a branch:
	git branch -d [branchname]

# Merge two branches:
	git merge [branchname] [branchname]

# Show all branches of a project:
	git branch

*** mysql:
# Get help:
	help

# Show databases:
	show databases;

# Choose a database to use:
	use database_name_here;

# Show database schema:
	show tables;

# Delete database:
	DROP DATABASE databasename;

# New database:
	CREATE DATABASE databasename;

# Create a new user:
	CREATE USER username@localhost IDENTIFIED BY 'password';

# Show users:
	select * from mysql.user;

# Delete a user:
	delete from mysql.user WHERE User='user_name';

# Give user access to all tables (make them root). the "%" means that they can sign in remotely, from any machine, not just localhost.:
	grant all privileges on *.* to someusr@"%" identified by 'password';

# give certain privileges to a user on a certain database:
	grant select,insert,update,delete,create,drop on somedb.* to someusr@"%" identified by 'password';

# Tell mysql to use new user priv policies:
	flush privileges;

# change user password:
	use mysql;

	update user set password='password'('newpassword') where User='user_name';

# mysql command line args:
# export text file with commands to rebuild all mysql tables:
	mysqldump databasename > dumpfilename.txt

# restore from a dump:
	mysql -u username -p < dumpfilename.txt

# dump entire database:
	mysqldump -u username -p --opt databasename > dumpfile.sql

# restore from entire database dump:
	mysql -u username -p --database=databasename < dumpfile.sql

# Get help with a target command (probably the same as above, but not always):
	command -h

# In case you forget the name of a command, print possible commands relating to any given word:
	apropos word

# Print current working directory:
	pwd


wget --mirror --convert-links --adjust-extension --page-requisites --no-parent --execute robots=off http://site.com



